/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.util.*

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        val generatedNumber: Int = generateRandomNonRepeatingNumber(digitsToGuess)
        println("The number you have to guess has $digitsToGuess digits! Good luck!")

        while (true) {
            println("Please input your guess")
            var inputOfUser = readln().toInt()
            val result = checkUserInputAgainstGeneratedNumber(inputOfUser, generatedNumber)
            println(result)

            if (result.m == digitsToGuess && result.n == digitsToGuess) {
                println("Congratulations, you won!")
                break
            }
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if (length > 9 || length < 1)
            throw IllegalArgumentException("Length must be between 1 and 9!")

        val listOfNumbers = mutableListOf(1,2,3,4,5,6,7,8,9)
        listOfNumbers.shuffle()
        var result: String = "";

        for (i in 0 until length) {
            result += listOfNumbers[0].toString();
            listOfNumbers.removeAt(0);
        }

        result.toInt();
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        if (input.toString().length != generatedNumber.toString().length)
            throw IllegalArgumentException("Input and generated number must have the same amount of digits!")

        var correctDigitCount: Int = 0
        var correctDigitAndPositionCount: Int = 0
        val inputString = input.toString()
        val generatedNumberString = generatedNumber.toString()
        val matchedNumbers = mutableListOf<Int>()

        for (i in inputString.indices) {
            if(generatedNumberString.contains(inputString[i]) && !matchedNumbers.contains(inputString[i].code)) {
                correctDigitCount++;
                matchedNumbers.add(inputString[i].code)
            }

            if (inputString[i] == generatedNumberString[i])
                correctDigitAndPositionCount++
        }

        CompareResult(correctDigitCount, correctDigitAndPositionCount)
    }
}

fun main() {
    val app: App = App();
    app.playNumberGame()
    app.playNumberGame(2)
}
